syntax = "proto3";

package apito.plugin.v1;

option go_package = "./protobuff";

import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// Universal Plugin service - everything is done through schema/API registration
// This service can handle any type of plugin: storage, CDN, auth, logic, etc.
service PluginService {
  // Initialize the plugin with environment variables
  rpc Init(InitRequest) returns (InitResponse);
  
  // Run plugin migration
  rpc Migration(MigrationRequest) returns (MigrationResponse);
  
  // Register GraphQL schema
  rpc SchemaRegister(SchemaRegisterRequest) returns (SchemaRegisterResponse);
  
  // Register REST API endpoints
  rpc RESTApiRegister(RESTApiRegisterRequest) returns (RESTApiRegisterResponse);
  
  // Get plugin version
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse);
  
  // Execute a function/resolver in the plugin
  rpc Execute(ExecuteRequest) returns (ExecuteResponse);
}

// Host service that provides operations to plugins (bidirectional communication)
service HostService {
  // Generate tenant token
  rpc GenerateTenantToken(GenerateTenantTokenRequest) returns (GenerateTenantTokenResponse);
  
  // Get project details
  rpc GetProjectDetails(GetProjectDetailsRequest) returns (GetProjectDetailsResponse);
  
  // Get single resource
  rpc GetSingleResource(GetSingleResourceRequest) returns (GetSingleResourceResponse);
  
  // Search resources
  rpc SearchResources(SearchResourcesRequest) returns (SearchResourcesResponse);
  
  // Get relation documents
  rpc GetRelationDocuments(GetRelationDocumentsRequest) returns (GetRelationDocumentsResponse);
  
  // Create new resource
  rpc CreateNewResource(CreateNewResourceRequest) returns (CreateNewResourceResponse);
  
  // Update resource
  rpc UpdateResource(UpdateResourceRequest) returns (UpdateResourceResponse);
  
  // Delete resource
  rpc DeleteResource(DeleteResourceRequest) returns (DeleteResourceResponse);
  
  // Debug
  rpc Debug(DebugRequest) returns (DebugResponse);
}

// Common types
message EnvVariable {
  string key = 1;
  string value = 2;
  bool hide = 3;
  bool is_system = 4;
}

// Plugin category enum (renamed from PluginType)
enum PluginCategory {
  PLUGIN_CATEGORY_NORMAL = 0;    // auth, customFunction etc
  PLUGIN_CATEGORY_FUNCTION = 1;  // function execution plugins
  PLUGIN_CATEGORY_STORAGE = 2;   // s3, cloudinary etc
}

// Plugin type enum for internal vs external
enum PluginType {
  PLUGIN_TYPE_INTERNAL = 0;  // System-wide plugins (registered to system API)
  PLUGIN_TYPE_EXTERNAL = 1;  // Project-specific plugins
}

// Plugin load status
enum PluginLoadStatus {
  PLUGIN_LOAD_STATUS_NOT_INSTALLED = 0;
  PLUGIN_LOAD_STATUS_INSTALLED = 1;
  PLUGIN_LOAD_STATUS_REINSTALL = 2;
  PLUGIN_LOAD_STATUS_LOADING = 3;
  PLUGIN_LOAD_STATUS_LOADED = 4;
  PLUGIN_LOAD_STATUS_LOAD_FAILED = 5;
}

// Plugin activate status
enum PluginActivateStatus {
  PLUGIN_ACTIVATE_STATUS_DEACTIVATED = 0;
  PLUGIN_ACTIVATE_STATUS_ACTIVATED = 1;
}

// HashiCorp handshake configuration
message HashiCorpHandshakeConfig {
  uint32 protocol_version = 1;
  string magic_cookie_key = 2;
  string magic_cookie_value = 3;
}

// Plugin details message
message PluginDetails {
  string id = 1;
  string title = 2;
  string icon = 3;
  int64 serial = 4;
  string version = 5;
  string description = 6;
  PluginCategory category = 7;        // storage, function, normal
  PluginType type = 8;                // New field: internal vs external
  string role = 9;
  repeated EnvVariable env_vars = 10;
  string exported_variable = 11;
  bool enable = 12;
  bool debug = 13;
  string repository_url = 14;
  string branch = 15;
  string author = 16;
  PluginLoadStatus load_status = 17;
  PluginActivateStatus activate_status = 18;
  repeated string belongs_to_projects = 19; // project ids
  // HashiCorp specific fields
  string binary_path = 20;
  HashiCorpHandshakeConfig handshake_config = 21;
  PluginLanguage language = 22;
}

enum PluginLanguage {
  PLUGIN_LANGUAGE_GO = 0;
  PLUGIN_LANGUAGE_JS = 1;
  PLUGIN_LANGUAGE_CPP = 2;
  PLUGIN_LANGUAGE_PYTHON = 3;
  PLUGIN_LANGUAGE_JAVA = 4;
  PLUGIN_LANGUAGE_RUBY = 5;
  PLUGIN_LANGUAGE_PHP = 6;
  PLUGIN_LANGUAGE_CSHARP = 7;
  PLUGIN_LANGUAGE_TYPESCRIPT = 8;
  PLUGIN_LANGUAGE_RUST = 9;
  PLUGIN_LANGUAGE_LUA = 10;
  PLUGIN_LANGUAGE_DART = 11;
}

message ThirdPartyGraphQLSchemas {
  google.protobuf.Struct queries = 1;
  google.protobuf.Struct mutations = 2;
  google.protobuf.Struct subscriptions = 3;
}

message ThirdPartyRESTApi {
  string method = 1;
  string path = 2;
  string description = 3;
  google.protobuf.Struct schema = 4;
  // Optional: handler function name for this endpoint
  string handler = 5;
}

message PluginProject {
  string id = 1;
  string name = 2;
  string description = 3;
  google.protobuf.Struct schema = 4;
  string created_at = 5;
  string updated_at = 6;
}

message AuditData {
  string resource = 1;
  string action = 2;
  google.protobuf.Struct author = 3;
  google.protobuf.Struct data = 4;
  google.protobuf.Struct meta = 5;
  google.protobuf.Struct additional_fields = 6;
}

// Plugin Service Messages
message InitRequest {
  repeated EnvVariable env_vars = 1;
}

message InitResponse {
  bool success = 1;
  string message = 2;
}

message MigrationRequest {}

message MigrationResponse {
  bool success = 1;
  string message = 2;
}

message SchemaRegisterRequest {}

message SchemaRegisterResponse {
  ThirdPartyGraphQLSchemas schema = 1;
}

message RESTApiRegisterRequest {}

message RESTApiRegisterResponse {
  repeated ThirdPartyRESTApi apis = 1;
}

message GetVersionRequest {}

message GetVersionResponse {
  string version = 1;
}

message ExecuteRequest {
  string function_name = 1;    // The function/resolver name to execute
  string function_type = 2;    // Type: "graphql_query", "graphql_mutation", "rest_api", "function"
  google.protobuf.Struct args = 3;  // Arguments for the function
  google.protobuf.Struct context = 4;  // Additional context data
}

message ExecuteResponse {
  bool success = 1;
  string message = 2;
  google.protobuf.Any result = 3;  // The actual result data
}

// Host Service Messages
message GenerateTenantTokenRequest {
  string token = 1;
  string tenant_id = 2;
}

message GenerateTenantTokenResponse {
  string token = 1;
}

message GetProjectDetailsRequest {
  string project_id = 1;
}

message GetProjectDetailsResponse {
  PluginProject project = 1;
}

message GetSingleResourceRequest {
  string model = 1;
  string id = 2;
  bool single_page_data = 3;
}

message GetSingleResourceResponse {
  google.protobuf.Any resource = 1;
}

message SearchResourcesRequest {
  string model = 1;
  google.protobuf.Struct filter = 2;
  bool aggregate = 3;
}

message SearchResourcesResponse {
  google.protobuf.Any resources = 1;
}

message GetRelationDocumentsRequest {
  string id = 1;
  google.protobuf.Struct connection = 2;
}

message GetRelationDocumentsResponse {
  google.protobuf.Any documents = 1;
}

message CreateNewResourceRequest {
  string model = 1;
  google.protobuf.Struct data = 2;
  google.protobuf.Struct connection = 3;
}

message CreateNewResourceResponse {
  google.protobuf.Any resource = 1;
}

message UpdateResourceRequest {
  string model = 1;
  string id = 2;
  bool single_page_data = 3;
  google.protobuf.Struct data = 4;
  google.protobuf.Struct connect = 5;
  google.protobuf.Struct disconnect = 6;
}

message UpdateResourceResponse {
  google.protobuf.Any resource = 1;
}

message DeleteResourceRequest {
  string model = 1;
  string id = 2;
}

message DeleteResourceResponse {
  bool success = 1;
  string message = 2;
}

message DebugRequest {
  string stage = 1;
  repeated google.protobuf.Any data = 2;
}

message DebugResponse {
  google.protobuf.Any result = 1;
} 