// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.17.3
// source: plugin.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginService_Init_FullMethodName            = "/apito.plugin.v1.PluginService/Init"
	PluginService_Migration_FullMethodName       = "/apito.plugin.v1.PluginService/Migration"
	PluginService_SchemaRegister_FullMethodName  = "/apito.plugin.v1.PluginService/SchemaRegister"
	PluginService_RESTApiRegister_FullMethodName = "/apito.plugin.v1.PluginService/RESTApiRegister"
	PluginService_GetVersion_FullMethodName      = "/apito.plugin.v1.PluginService/GetVersion"
	PluginService_Execute_FullMethodName         = "/apito.plugin.v1.PluginService/Execute"
)

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Universal Plugin service - everything is done through schema/API registration
// This service can handle any type of plugin: storage, CDN, auth, logic, etc.
type PluginServiceClient interface {
	// Initialize the plugin with environment variables
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	// Run plugin migration
	Migration(ctx context.Context, in *MigrationRequest, opts ...grpc.CallOption) (*MigrationResponse, error)
	// Register GraphQL schema
	SchemaRegister(ctx context.Context, in *SchemaRegisterRequest, opts ...grpc.CallOption) (*SchemaRegisterResponse, error)
	// Register REST API endpoints
	RESTApiRegister(ctx context.Context, in *RESTApiRegisterRequest, opts ...grpc.CallOption) (*RESTApiRegisterResponse, error)
	// Get plugin version
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// Execute a function/resolver in the plugin
	Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitResponse)
	err := c.cc.Invoke(ctx, PluginService_Init_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Migration(ctx context.Context, in *MigrationRequest, opts ...grpc.CallOption) (*MigrationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MigrationResponse)
	err := c.cc.Invoke(ctx, PluginService_Migration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) SchemaRegister(ctx context.Context, in *SchemaRegisterRequest, opts ...grpc.CallOption) (*SchemaRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SchemaRegisterResponse)
	err := c.cc.Invoke(ctx, PluginService_SchemaRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) RESTApiRegister(ctx context.Context, in *RESTApiRegisterRequest, opts ...grpc.CallOption) (*RESTApiRegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RESTApiRegisterResponse)
	err := c.cc.Invoke(ctx, PluginService_RESTApiRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, PluginService_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Execute(ctx context.Context, in *ExecuteRequest, opts ...grpc.CallOption) (*ExecuteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteResponse)
	err := c.cc.Invoke(ctx, PluginService_Execute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility.
//
// Universal Plugin service - everything is done through schema/API registration
// This service can handle any type of plugin: storage, CDN, auth, logic, etc.
type PluginServiceServer interface {
	// Initialize the plugin with environment variables
	Init(context.Context, *InitRequest) (*InitResponse, error)
	// Run plugin migration
	Migration(context.Context, *MigrationRequest) (*MigrationResponse, error)
	// Register GraphQL schema
	SchemaRegister(context.Context, *SchemaRegisterRequest) (*SchemaRegisterResponse, error)
	// Register REST API endpoints
	RESTApiRegister(context.Context, *RESTApiRegisterRequest) (*RESTApiRegisterResponse, error)
	// Get plugin version
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// Execute a function/resolver in the plugin
	Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginServiceServer struct{}

func (UnimplementedPluginServiceServer) Init(context.Context, *InitRequest) (*InitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedPluginServiceServer) Migration(context.Context, *MigrationRequest) (*MigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Migration not implemented")
}
func (UnimplementedPluginServiceServer) SchemaRegister(context.Context, *SchemaRegisterRequest) (*SchemaRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchemaRegister not implemented")
}
func (UnimplementedPluginServiceServer) RESTApiRegister(context.Context, *RESTApiRegisterRequest) (*RESTApiRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RESTApiRegister not implemented")
}
func (UnimplementedPluginServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedPluginServiceServer) Execute(context.Context, *ExecuteRequest) (*ExecuteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}
func (UnimplementedPluginServiceServer) testEmbeddedByValue()                       {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Init_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Migration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Migration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Migration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Migration(ctx, req.(*MigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_SchemaRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).SchemaRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_SchemaRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).SchemaRegister(ctx, req.(*SchemaRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_RESTApiRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RESTApiRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).RESTApiRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_RESTApiRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).RESTApiRegister(ctx, req.(*RESTApiRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Execute(ctx, req.(*ExecuteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apito.plugin.v1.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _PluginService_Init_Handler,
		},
		{
			MethodName: "Migration",
			Handler:    _PluginService_Migration_Handler,
		},
		{
			MethodName: "SchemaRegister",
			Handler:    _PluginService_SchemaRegister_Handler,
		},
		{
			MethodName: "RESTApiRegister",
			Handler:    _PluginService_RESTApiRegister_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _PluginService_GetVersion_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _PluginService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}

const (
	HostService_GenerateTenantToken_FullMethodName  = "/apito.plugin.v1.HostService/GenerateTenantToken"
	HostService_GetProjectDetails_FullMethodName    = "/apito.plugin.v1.HostService/GetProjectDetails"
	HostService_GetSingleResource_FullMethodName    = "/apito.plugin.v1.HostService/GetSingleResource"
	HostService_SearchResources_FullMethodName      = "/apito.plugin.v1.HostService/SearchResources"
	HostService_GetRelationDocuments_FullMethodName = "/apito.plugin.v1.HostService/GetRelationDocuments"
	HostService_CreateNewResource_FullMethodName    = "/apito.plugin.v1.HostService/CreateNewResource"
	HostService_UpdateResource_FullMethodName       = "/apito.plugin.v1.HostService/UpdateResource"
	HostService_DeleteResource_FullMethodName       = "/apito.plugin.v1.HostService/DeleteResource"
	HostService_Debug_FullMethodName                = "/apito.plugin.v1.HostService/Debug"
)

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Host service that provides operations to plugins (bidirectional communication)
type HostServiceClient interface {
	// Generate tenant token
	GenerateTenantToken(ctx context.Context, in *GenerateTenantTokenRequest, opts ...grpc.CallOption) (*GenerateTenantTokenResponse, error)
	// Get project details
	GetProjectDetails(ctx context.Context, in *GetProjectDetailsRequest, opts ...grpc.CallOption) (*GetProjectDetailsResponse, error)
	// Get single resource
	GetSingleResource(ctx context.Context, in *GetSingleResourceRequest, opts ...grpc.CallOption) (*GetSingleResourceResponse, error)
	// Search resources
	SearchResources(ctx context.Context, in *SearchResourcesRequest, opts ...grpc.CallOption) (*SearchResourcesResponse, error)
	// Get relation documents
	GetRelationDocuments(ctx context.Context, in *GetRelationDocumentsRequest, opts ...grpc.CallOption) (*GetRelationDocumentsResponse, error)
	// Create new resource
	CreateNewResource(ctx context.Context, in *CreateNewResourceRequest, opts ...grpc.CallOption) (*CreateNewResourceResponse, error)
	// Update resource
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	// Delete resource
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	// Debug
	Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) GenerateTenantToken(ctx context.Context, in *GenerateTenantTokenRequest, opts ...grpc.CallOption) (*GenerateTenantTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateTenantTokenResponse)
	err := c.cc.Invoke(ctx, HostService_GenerateTenantToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetProjectDetails(ctx context.Context, in *GetProjectDetailsRequest, opts ...grpc.CallOption) (*GetProjectDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProjectDetailsResponse)
	err := c.cc.Invoke(ctx, HostService_GetProjectDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetSingleResource(ctx context.Context, in *GetSingleResourceRequest, opts ...grpc.CallOption) (*GetSingleResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSingleResourceResponse)
	err := c.cc.Invoke(ctx, HostService_GetSingleResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) SearchResources(ctx context.Context, in *SearchResourcesRequest, opts ...grpc.CallOption) (*SearchResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResourcesResponse)
	err := c.cc.Invoke(ctx, HostService_SearchResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetRelationDocuments(ctx context.Context, in *GetRelationDocumentsRequest, opts ...grpc.CallOption) (*GetRelationDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelationDocumentsResponse)
	err := c.cc.Invoke(ctx, HostService_GetRelationDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) CreateNewResource(ctx context.Context, in *CreateNewResourceRequest, opts ...grpc.CallOption) (*CreateNewResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateNewResourceResponse)
	err := c.cc.Invoke(ctx, HostService_CreateNewResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, HostService_UpdateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, HostService_DeleteResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) Debug(ctx context.Context, in *DebugRequest, opts ...grpc.CallOption) (*DebugResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebugResponse)
	err := c.cc.Invoke(ctx, HostService_Debug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
// All implementations must embed UnimplementedHostServiceServer
// for forward compatibility.
//
// Host service that provides operations to plugins (bidirectional communication)
type HostServiceServer interface {
	// Generate tenant token
	GenerateTenantToken(context.Context, *GenerateTenantTokenRequest) (*GenerateTenantTokenResponse, error)
	// Get project details
	GetProjectDetails(context.Context, *GetProjectDetailsRequest) (*GetProjectDetailsResponse, error)
	// Get single resource
	GetSingleResource(context.Context, *GetSingleResourceRequest) (*GetSingleResourceResponse, error)
	// Search resources
	SearchResources(context.Context, *SearchResourcesRequest) (*SearchResourcesResponse, error)
	// Get relation documents
	GetRelationDocuments(context.Context, *GetRelationDocumentsRequest) (*GetRelationDocumentsResponse, error)
	// Create new resource
	CreateNewResource(context.Context, *CreateNewResourceRequest) (*CreateNewResourceResponse, error)
	// Update resource
	UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error)
	// Delete resource
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	// Debug
	Debug(context.Context, *DebugRequest) (*DebugResponse, error)
	mustEmbedUnimplementedHostServiceServer()
}

// UnimplementedHostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostServiceServer struct{}

func (UnimplementedHostServiceServer) GenerateTenantToken(context.Context, *GenerateTenantTokenRequest) (*GenerateTenantTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTenantToken not implemented")
}
func (UnimplementedHostServiceServer) GetProjectDetails(context.Context, *GetProjectDetailsRequest) (*GetProjectDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDetails not implemented")
}
func (UnimplementedHostServiceServer) GetSingleResource(context.Context, *GetSingleResourceRequest) (*GetSingleResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleResource not implemented")
}
func (UnimplementedHostServiceServer) SearchResources(context.Context, *SearchResourcesRequest) (*SearchResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchResources not implemented")
}
func (UnimplementedHostServiceServer) GetRelationDocuments(context.Context, *GetRelationDocumentsRequest) (*GetRelationDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelationDocuments not implemented")
}
func (UnimplementedHostServiceServer) CreateNewResource(context.Context, *CreateNewResourceRequest) (*CreateNewResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewResource not implemented")
}
func (UnimplementedHostServiceServer) UpdateResource(context.Context, *UpdateResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedHostServiceServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedHostServiceServer) Debug(context.Context, *DebugRequest) (*DebugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debug not implemented")
}
func (UnimplementedHostServiceServer) mustEmbedUnimplementedHostServiceServer() {}
func (UnimplementedHostServiceServer) testEmbeddedByValue()                     {}

// UnsafeHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServiceServer will
// result in compilation errors.
type UnsafeHostServiceServer interface {
	mustEmbedUnimplementedHostServiceServer()
}

func RegisterHostServiceServer(s grpc.ServiceRegistrar, srv HostServiceServer) {
	// If the following call pancis, it indicates UnimplementedHostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HostService_ServiceDesc, srv)
}

func _HostService_GenerateTenantToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTenantTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GenerateTenantToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GenerateTenantToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GenerateTenantToken(ctx, req.(*GenerateTenantTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetProjectDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetProjectDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GetProjectDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetProjectDetails(ctx, req.(*GetProjectDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetSingleResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetSingleResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GetSingleResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetSingleResource(ctx, req.(*GetSingleResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_SearchResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).SearchResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_SearchResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).SearchResources(ctx, req.(*SearchResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetRelationDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelationDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetRelationDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_GetRelationDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetRelationDocuments(ctx, req.(*GetRelationDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_CreateNewResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).CreateNewResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_CreateNewResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).CreateNewResource(ctx, req.(*CreateNewResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostService_Debug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Debug(ctx, req.(*DebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostService_ServiceDesc is the grpc.ServiceDesc for HostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apito.plugin.v1.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateTenantToken",
			Handler:    _HostService_GenerateTenantToken_Handler,
		},
		{
			MethodName: "GetProjectDetails",
			Handler:    _HostService_GetProjectDetails_Handler,
		},
		{
			MethodName: "GetSingleResource",
			Handler:    _HostService_GetSingleResource_Handler,
		},
		{
			MethodName: "SearchResources",
			Handler:    _HostService_SearchResources_Handler,
		},
		{
			MethodName: "GetRelationDocuments",
			Handler:    _HostService_GetRelationDocuments_Handler,
		},
		{
			MethodName: "CreateNewResource",
			Handler:    _HostService_CreateNewResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _HostService_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _HostService_DeleteResource_Handler,
		},
		{
			MethodName: "Debug",
			Handler:    _HostService_Debug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
